{"ast":null,"code":"var _jsxFileName = \"/home/sumanjit/projects/dappcord/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { io } from \"socket.io-client\";\n\n// Components\nimport Navigation from './components/Navigation';\nimport Servers from './components/Servers';\nimport Channels from './components/Channels';\nimport Messages from './components/Messages';\n\n// ABIs\nimport Dappcord from './abis/Dappcord.json';\n\n// Config\nimport config from './config.json';\n\n// Socket\n//const socket = io('ws://localhost:3030');\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [provider, setProvider] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [dappcord, setDappcord] = useState(null);\n  const [channels, setChannels] = useState([]);\n  const loadBlockchainData = async () => {\n    //const accounts = await window.ethereum.request({ method: 'eth_requestAccounts'})\n    //const account = ethers.utils.getAddress(accounts[0])\n    //console.log(account)\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    setProvider(provider);\n    const network = await provider.getNetwork();\n    const dappcord = new ethers.Contract(config[network.chainId].Dappcord.address, Dappcord, provider);\n    setDappcord(dappcord);\n    const totalChannels = await dappcord.totalChannels();\n    const channels = [];\n    for (var i = 1; i <= totalChannels; i++) {\n      const channel = await dappcord.getChannel(i);\n      channels.push(channel);\n    }\n    setChannels(channels);\n    window.ethereum.on('accountsChanged', async () => {\n      window.location.reload();\n    });\n  };\n  useEffect(() => {\n    loadBlockchainData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {\n      account: account,\n      setAccount: setAccount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(Servers, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Channels, {\n        provider: provider,\n        account: account,\n        dappcord: dappcord,\n        channels: channels\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Messages, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"FZWcNQD9Q0YbqJO5rTmtcsDdCdM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","ethers","io","Navigation","Servers","Channels","Messages","Dappcord","config","App","provider","setProvider","account","setAccount","dappcord","setDappcord","channels","setChannels","loadBlockchainData","providers","Web3Provider","window","ethereum","network","getNetwork","Contract","chainId","address","totalChannels","i","channel","getChannel","push","on","location","reload"],"sources":["/home/sumanjit/projects/dappcord/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { ethers } from 'ethers'\nimport { io } from \"socket.io-client\"\n\n// Components\nimport Navigation from './components/Navigation'\nimport Servers from './components/Servers'\nimport Channels from './components/Channels'\nimport Messages from './components/Messages'\n\n// ABIs\nimport Dappcord from './abis/Dappcord.json'\n\n// Config\nimport config from './config.json';\n\n// Socket\n//const socket = io('ws://localhost:3030');\n\nfunction App() {\n  const [provider, setProvider] = useState(null)\n  const [account, setAccount] = useState(null)\n\n  const [dappcord, setDappcord] = useState(null)\n  const [channels, setChannels] = useState([])\n\n  const loadBlockchainData = async () => {    \n    //const accounts = await window.ethereum.request({ method: 'eth_requestAccounts'})\n    //const account = ethers.utils.getAddress(accounts[0])\n    //console.log(account)\n    const provider = new ethers.providers.Web3Provider(window.ethereum)\n    setProvider(provider)\n\n    const network = await provider.getNetwork()\n    const dappcord = new ethers.Contract( config[network.chainId].Dappcord.address, Dappcord, provider)\n    setDappcord(dappcord)\n\n    const totalChannels = await dappcord.totalChannels()\n    const channels = []\n    for (var i = 1; i <= totalChannels; i++){\n      const channel = await dappcord.getChannel(i)\n      channels.push(channel)\n    }\n    setChannels(channels)\n\n    window.ethereum.on('accountsChanged', async () => {\n      window.location.reload()\n    })\n  }\n\n  useEffect(() => {\n    loadBlockchainData()\n  }, [])\n\n  return (\n    <div>\n      <Navigation account={account} setAccount={setAccount} />\n      \n\n      <main>\n        <Servers />\n        <Channels\n          provider={provider}\n          account={account}\n          dappcord={dappcord}\n          channels={channels} \n        />\n        <Messages />\n\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,MAAM,QAAQ,QAAQ;AAC/B,SAASC,EAAE,QAAQ,kBAAkB;;AAErC;AACA,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,QAAQ,MAAM,uBAAuB;;AAE5C;AACA,OAAOC,QAAQ,MAAM,sBAAsB;;AAE3C;AACA,OAAOC,MAAM,MAAM,eAAe;;AAElC;AACA;AAAA;AAEA,SAASC,GAAG,GAAG;EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMkB,kBAAkB,GAAG,YAAY;IACrC;IACA;IACA;IACA,MAAMR,QAAQ,GAAG,IAAIT,MAAM,CAACkB,SAAS,CAACC,YAAY,CAACC,MAAM,CAACC,QAAQ,CAAC;IACnEX,WAAW,CAACD,QAAQ,CAAC;IAErB,MAAMa,OAAO,GAAG,MAAMb,QAAQ,CAACc,UAAU,EAAE;IAC3C,MAAMV,QAAQ,GAAG,IAAIb,MAAM,CAACwB,QAAQ,CAAEjB,MAAM,CAACe,OAAO,CAACG,OAAO,CAAC,CAACnB,QAAQ,CAACoB,OAAO,EAAEpB,QAAQ,EAAEG,QAAQ,CAAC;IACnGK,WAAW,CAACD,QAAQ,CAAC;IAErB,MAAMc,aAAa,GAAG,MAAMd,QAAQ,CAACc,aAAa,EAAE;IACpD,MAAMZ,QAAQ,GAAG,EAAE;IACnB,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAID,aAAa,EAAEC,CAAC,EAAE,EAAC;MACtC,MAAMC,OAAO,GAAG,MAAMhB,QAAQ,CAACiB,UAAU,CAACF,CAAC,CAAC;MAC5Cb,QAAQ,CAACgB,IAAI,CAACF,OAAO,CAAC;IACxB;IACAb,WAAW,CAACD,QAAQ,CAAC;IAErBK,MAAM,CAACC,QAAQ,CAACW,EAAE,CAAC,iBAAiB,EAAE,YAAY;MAChDZ,MAAM,CAACa,QAAQ,CAACC,MAAM,EAAE;IAC1B,CAAC,CAAC;EACJ,CAAC;EAEDpC,SAAS,CAAC,MAAM;IACdmB,kBAAkB,EAAE;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE;IAAA,wBACE,QAAC,UAAU;MAAC,OAAO,EAAEN,OAAQ;MAAC,UAAU,EAAEC;IAAW;MAAA;MAAA;MAAA;IAAA,QAAG,eAGxD;MAAA,wBACE,QAAC,OAAO;QAAA;QAAA;QAAA;MAAA,QAAG,eACX,QAAC,QAAQ;QACP,QAAQ,EAAEH,QAAS;QACnB,OAAO,EAAEE,OAAQ;QACjB,QAAQ,EAAEE,QAAS;QACnB,QAAQ,EAAEE;MAAS;QAAA;QAAA;QAAA;MAAA,QACnB,eACF,QAAC,QAAQ;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA,QAEP;EAAA;IAAA;IAAA;IAAA;EAAA,QACH;AAEV;AAAC,GArDQP,GAAG;AAAA,KAAHA,GAAG;AAuDZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}